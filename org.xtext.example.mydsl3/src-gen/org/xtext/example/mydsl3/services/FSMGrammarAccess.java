/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.mydsl3.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FSMGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl3.FSM.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypesEnumerationTypeParserRuleCall_0_0 = (RuleCall)cTypesAssignment_0.eContents().get(0);
		private final Assignment cFsmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFsmFSMParserRuleCall_1_0 = (RuleCall)cFsmAssignment_1.eContents().get(0);
		
		//Model:
		//	types+=EnumerationType*
		//	fsm+=FSM*;
		@Override public ParserRule getRule() { return rule; }
		
		//types+=EnumerationType* fsm+=FSM*
		public Group getGroup() { return cGroup; }
		
		//types+=EnumerationType*
		public Assignment getTypesAssignment_0() { return cTypesAssignment_0; }
		
		//EnumerationType
		public RuleCall getTypesEnumerationTypeParserRuleCall_0_0() { return cTypesEnumerationTypeParserRuleCall_0_0; }
		
		//fsm+=FSM*
		public Assignment getFsmAssignment_1() { return cFsmAssignment_1; }
		
		//FSM
		public RuleCall getFsmFSMParserRuleCall_1_0() { return cFsmFSMParserRuleCall_1_0; }
	}
	public class FSMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl3.FSM.FSM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFSMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEnumerationTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEnumerationTypeQualifiedIDParserRuleCall_3_0_1 = (RuleCall)cTypeEnumerationTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cOwnedStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOwnedStateStateParserRuleCall_4_0 = (RuleCall)cOwnedStateAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FSM:
		//	'FSM'
		//	'{'
		//	'type' type=[EnumerationType|QualifiedID] ownedState+=State*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'FSM' '{' 'type' type=[EnumerationType|QualifiedID] ownedState+=State* '}'
		public Group getGroup() { return cGroup; }
		
		//'FSM'
		public Keyword getFSMKeyword_0() { return cFSMKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=[EnumerationType|QualifiedID]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[EnumerationType|QualifiedID]
		public CrossReference getTypeEnumerationTypeCrossReference_3_0() { return cTypeEnumerationTypeCrossReference_3_0; }
		
		//QualifiedID
		public RuleCall getTypeEnumerationTypeQualifiedIDParserRuleCall_3_0_1() { return cTypeEnumerationTypeQualifiedIDParserRuleCall_3_0_1; }
		
		//ownedState+=State*
		public Assignment getOwnedStateAssignment_4() { return cOwnedStateAssignment_4; }
		
		//State
		public RuleCall getOwnedStateStateParserRuleCall_4_0() { return cOwnedStateStateParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl3.FSM.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLiteralKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLiteralAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cLiteralEnumerationLiteralCrossReference_2_1_0 = (CrossReference)cLiteralAssignment_2_1.eContents().get(0);
		private final RuleCall cLiteralEnumerationLiteralQualifiedIDParserRuleCall_2_1_0_1 = (RuleCall)cLiteralEnumerationLiteralCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTransitionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOutgoingTransitionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOutgoingTransitionTransitionParserRuleCall_3_2_0 = (RuleCall)cOutgoingTransitionAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//State:
		//	'State'
		//	'{' ('literal' literal=[EnumerationLiteral|QualifiedID]) ('transitions' '(' outgoingTransition+=Transition* ')')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'State' '{' ('literal' literal=[EnumerationLiteral|QualifiedID]) ('transitions' '(' outgoingTransition+=Transition*
		//')')? '}'
		public Group getGroup() { return cGroup; }
		
		//'State'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'literal' literal=[EnumerationLiteral|QualifiedID]
		public Group getGroup_2() { return cGroup_2; }
		
		//'literal'
		public Keyword getLiteralKeyword_2_0() { return cLiteralKeyword_2_0; }
		
		//literal=[EnumerationLiteral|QualifiedID]
		public Assignment getLiteralAssignment_2_1() { return cLiteralAssignment_2_1; }
		
		//[EnumerationLiteral|QualifiedID]
		public CrossReference getLiteralEnumerationLiteralCrossReference_2_1_0() { return cLiteralEnumerationLiteralCrossReference_2_1_0; }
		
		//QualifiedID
		public RuleCall getLiteralEnumerationLiteralQualifiedIDParserRuleCall_2_1_0_1() { return cLiteralEnumerationLiteralQualifiedIDParserRuleCall_2_1_0_1; }
		
		//('transitions' '(' outgoingTransition+=Transition* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'transitions'
		public Keyword getTransitionsKeyword_3_0() { return cTransitionsKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//outgoingTransition+=Transition*
		public Assignment getOutgoingTransitionAssignment_3_2() { return cOutgoingTransitionAssignment_3_2; }
		
		//Transition
		public RuleCall getOutgoingTransitionTransitionParserRuleCall_3_2_0() { return cOutgoingTransitionTransitionParserRuleCall_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl3.FSM.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetStateCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetStateQualifiedIDParserRuleCall_1_0_1 = (RuleCall)cTargetStateCrossReference_1_0.eContents().get(1);
		
		//Transition:
		//	'to' target=[State|QualifiedID];
		@Override public ParserRule getRule() { return rule; }
		
		//'to' target=[State|QualifiedID]
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//target=[State|QualifiedID]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[State|QualifiedID]
		public CrossReference getTargetStateCrossReference_1_0() { return cTargetStateCrossReference_1_0; }
		
		//QualifiedID
		public RuleCall getTargetStateQualifiedIDParserRuleCall_1_0_1() { return cTargetStateQualifiedIDParserRuleCall_1_0_1; }
	}
	public class EnumerationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl3.FSM.EnumerationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLiteralsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLiteralsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLiteralsEnumerationLiteralParserRuleCall_4_0 = (RuleCall)cLiteralsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLiteralsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLiteralsEnumerationLiteralParserRuleCall_5_1_0 = (RuleCall)cLiteralsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnumerationType:
		//	'EnumerationType'
		//	name=ID
		//	'literals'
		//	'('
		//	literals+=EnumerationLiteral ("," literals+=EnumerationLiteral)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'EnumerationType' name=ID 'literals' '(' literals+=EnumerationLiteral ("," literals+=EnumerationLiteral)* ')'
		public Group getGroup() { return cGroup; }
		
		//'EnumerationType'
		public Keyword getEnumerationTypeKeyword_0() { return cEnumerationTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'literals'
		public Keyword getLiteralsKeyword_2() { return cLiteralsKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//literals+=EnumerationLiteral
		public Assignment getLiteralsAssignment_4() { return cLiteralsAssignment_4; }
		
		//EnumerationLiteral
		public RuleCall getLiteralsEnumerationLiteralParserRuleCall_4_0() { return cLiteralsEnumerationLiteralParserRuleCall_4_0; }
		
		//("," literals+=EnumerationLiteral)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//literals+=EnumerationLiteral
		public Assignment getLiteralsAssignment_5_1() { return cLiteralsAssignment_5_1; }
		
		//EnumerationLiteral
		public RuleCall getLiteralsEnumerationLiteralParserRuleCall_5_1_0() { return cLiteralsEnumerationLiteralParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl3.FSM.EnumerationLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationLiteral:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl3.FSM.QualifiedID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQUALIFIED_IDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//QualifiedID:
		//	ID | QUALIFIED_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | QUALIFIED_ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//QUALIFIED_ID
		public RuleCall getQUALIFIED_IDTerminalRuleCall_1() { return cQUALIFIED_IDTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final FSMElements pFSM;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final EnumerationTypeElements pEnumerationType;
	private final EnumerationLiteralElements pEnumerationLiteral;
	private final QualifiedIDElements pQualifiedID;
	private final TerminalRule tQUALIFIED_ID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FSMGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFSM = new FSMElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pEnumerationType = new EnumerationTypeElements();
		this.pEnumerationLiteral = new EnumerationLiteralElements();
		this.pQualifiedID = new QualifiedIDElements();
		this.tQUALIFIED_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl3.FSM.QUALIFIED_ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl3.FSM".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	types+=EnumerationType*
	//	fsm+=FSM*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//FSM:
	//	'FSM'
	//	'{'
	//	'type' type=[EnumerationType|QualifiedID] ownedState+=State*
	//	'}';
	public FSMElements getFSMAccess() {
		return pFSM;
	}
	
	public ParserRule getFSMRule() {
		return getFSMAccess().getRule();
	}
	
	//State:
	//	'State'
	//	'{' ('literal' literal=[EnumerationLiteral|QualifiedID]) ('transitions' '(' outgoingTransition+=Transition* ')')?
	//	'}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition:
	//	'to' target=[State|QualifiedID];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//EnumerationType:
	//	'EnumerationType'
	//	name=ID
	//	'literals'
	//	'('
	//	literals+=EnumerationLiteral ("," literals+=EnumerationLiteral)*
	//	')';
	public EnumerationTypeElements getEnumerationTypeAccess() {
		return pEnumerationType;
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}
	
	//EnumerationLiteral:
	//	name=ID;
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return pEnumerationLiteral;
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}
	
	//QualifiedID:
	//	ID | QUALIFIED_ID;
	public QualifiedIDElements getQualifiedIDAccess() {
		return pQualifiedID;
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}
	
	//terminal QUALIFIED_ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* '.' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' |
	//	'A'..'Z' | '_' | '0'..'9')* ('.' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*)*;
	public TerminalRule getQUALIFIED_IDRule() {
		return tQUALIFIED_ID;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

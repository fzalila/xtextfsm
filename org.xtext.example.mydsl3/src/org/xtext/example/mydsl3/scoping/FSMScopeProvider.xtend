/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.mydsl3.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.mydsl3.fSM.Transition
import java.util.ArrayList
import org.eclipse.xtext.resource.IEObjectDescription
import org.xtext.example.mydsl3.fSM.State
import org.xtext.example.mydsl3.fSM.FSM
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.naming.QualifiedName
import org.xtext.example.mydsl3.fSM.EnumerationType
import org.eclipse.xtext.scoping.impl.SimpleScope
import org.eclipse.xtext.scoping.IScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class FSMScopeProvider extends AbstractFSMScopeProvider {
	override getScope(EObject object, EReference ref) {
		if (object instanceof Transition) {
			scope_Transition_target(object as Transition, ref)
		}
	}


	def scope_Transition_target(Transition transition, EReference reference) {
		var ArrayList<IEObjectDescription> res = new ArrayList<IEObjectDescription>
		var State s = transition.eContainer as State
		var FSM fsm = s.eContainer as FSM
		for (state : fsm.ownedState) {
			res.add(
				EObjectDescription.create(
					QualifiedName.create((state.literal.eContainer as EnumerationType).name, state.literal.name),
					state.literal))
			}
			// println("res " + res)
			return new SimpleScope(IScope.NULLSCOPE, res)
		}

	}
	
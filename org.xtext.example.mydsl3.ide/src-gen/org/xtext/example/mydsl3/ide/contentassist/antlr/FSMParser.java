/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.mydsl3.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl3.ide.contentassist.antlr.internal.InternalFSMParser;
import org.xtext.example.mydsl3.services.FSMGrammarAccess;

public class FSMParser extends AbstractContentAssistParser {

	@Inject
	private FSMGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalFSMParser createParser() {
		InternalFSMParser result = new InternalFSMParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQualifiedIDAccess().getAlternatives(), "rule__QualifiedID__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getFSMAccess().getGroup(), "rule__FSM__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_2(), "rule__State__Group_2__0");
					put(grammarAccess.getStateAccess().getGroup_3(), "rule__State__Group_3__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getEnumerationTypeAccess().getGroup(), "rule__EnumerationType__Group__0");
					put(grammarAccess.getEnumerationTypeAccess().getGroup_5(), "rule__EnumerationType__Group_5__0");
					put(grammarAccess.getModelAccess().getTypesAssignment_0(), "rule__Model__TypesAssignment_0");
					put(grammarAccess.getModelAccess().getFsmAssignment_1(), "rule__Model__FsmAssignment_1");
					put(grammarAccess.getFSMAccess().getTypeAssignment_3(), "rule__FSM__TypeAssignment_3");
					put(grammarAccess.getFSMAccess().getOwnedStateAssignment_4(), "rule__FSM__OwnedStateAssignment_4");
					put(grammarAccess.getStateAccess().getLiteralAssignment_2_1(), "rule__State__LiteralAssignment_2_1");
					put(grammarAccess.getStateAccess().getOutgoingTransitionAssignment_3_2(), "rule__State__OutgoingTransitionAssignment_3_2");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_1(), "rule__Transition__TargetAssignment_1");
					put(grammarAccess.getEnumerationTypeAccess().getNameAssignment_1(), "rule__EnumerationType__NameAssignment_1");
					put(grammarAccess.getEnumerationTypeAccess().getLiteralsAssignment_4(), "rule__EnumerationType__LiteralsAssignment_4");
					put(grammarAccess.getEnumerationTypeAccess().getLiteralsAssignment_5_1(), "rule__EnumerationType__LiteralsAssignment_5_1");
					put(grammarAccess.getEnumerationLiteralAccess().getNameAssignment(), "rule__EnumerationLiteral__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FSMGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FSMGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
